name: Pull Request Validation

on:
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for TypeScript errors
        run: npx tsc --noEmit

      - name: Run ESLint
        run: pnpm run lint

      - name: Check for formatting issues
        run: pnpm run format --check || echo "Formatting issues found. Run 'pnpm run format' to fix."

      - name: Generate assets
        run: pnpm run generate:assets

      - name: Run comprehensive tests
        run: |
          echo "Running comprehensive test suite for PR validation..."
          node test-runner.js
          echo "All tests completed successfully!"

      - name: Test build compilation
        run: pnpm run package
        env:
          CI: true

      - name: Install Linux dependencies for build test
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libxss1 libgtk-3-dev libxrandr2 libasound2-dev

      - name: Test full build process
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run make
        env:
          CI: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate || echo "Security audit completed with warnings"

      - name: Check dependency licenses
        run: |
          echo "Checking dependency licenses..."
          npx license-checker --summary || echo "License check completed"

      - name: Analyze bundle size changes
        run: |
          echo "Analyzing potential bundle size impact..."
          pnpm run generate:assets
          pnpm run package
          echo "Package analysis completed"

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -r "TODO\|FIXME\|XXX\|HACK" src/ launcher-gui/src/ || echo "No TODO/FIXME comments found"

  compatibility:
    name: Compatibility Tests with Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test compilation with Node ${{ matrix.node-version }}
        run: npx tsc --noEmit

      - name: Test asset generation
        run: pnpm run generate:assets

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [validate, code-quality, compatibility]
    if: always()

    steps:
      - name: Generate PR Summary
        run: |
          echo "## Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Multi-platform validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… TypeScript compilation checked" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… ESLint validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Test suite executed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Build compilation verified" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code quality analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms Tested" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu (latest)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows (latest)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (latest)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready for review! ðŸš€" >> $GITHUB_STEP_SUMMARY
