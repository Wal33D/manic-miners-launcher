name: Nightly Build & Test

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  nightly-test:
    name: Nightly Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run extended test suite
        run: |
          echo "Running extended nightly test suite..."
          node test-runner.js
          echo "Extended tests completed!"

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

      - name: Run linting with full output
        run: pnpm run lint

      - name: Generate assets
        run: pnpm run generate:assets

      - name: Test packaging
        run: pnpm run package
        env:
          CI: true

      - name: Install Linux dependencies for full build
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libxss1 libgtk-3-dev libxrandr2 libasound2-dev rpm fakeroot

      - name: Test full build process
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run make
        env:
          CI: true

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive security audit
        run: |
          echo "Running comprehensive security audit..."
          pnpm audit --audit-level low || echo "Security issues found - review needed"

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          pnpm outdated || echo "Some dependencies are outdated"

      - name: License compliance check
        run: |
          echo "Checking license compliance..."
          npx license-checker --summary || echo "License check completed"

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate assets
        run: pnpm run generate:assets

      - name: Build application for analysis
        run: pnpm run package
        env:
          CI: true

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle size and performance..."
          du -sh out/manic-miners-launcher-* || echo "Package not found"
          find out/ -name "*.js" -exec wc -c {} + | sort -nr | head -20 || echo "No JS files found"

      - name: Check startup performance
        run: |
          echo "Analyzing potential startup performance..."
          find out/ -name "*.js" | xargs grep -l "console.log" || echo "No console.log statements found"

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Code complexity analysis
        run: |
          echo "Analyzing code complexity..."
          find src/ launcher-gui/src/ -name "*.ts" -o -name "*.tsx" | wc -l
          echo "TypeScript files found"

      - name: Check for code smells
        run: |
          echo "Checking for potential code issues..."
          grep -r "any\|console.log\|debugger" src/ launcher-gui/src/ || echo "No obvious code smells found"

      - name: Verify test coverage areas
        run: |
          echo "Checking test coverage areas..."
          find src/tests/ -name "*.test.ts" | wc -l
          echo "Test files found"

  notification:
    name: Nightly Build Notification
    runs-on: ubuntu-latest
    needs: [nightly-test, dependency-audit, performance-analysis, code-quality]
    if: always()

    steps:
      - name: Generate nightly summary
        run: |
          echo "## Nightly Build Summary - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform testing completed" >> $GITHUB_STEP_SUMMARY
          echo "- Multiple Node.js versions tested" >> $GITHUB_STEP_SUMMARY
          echo "- Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Matrix Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- OS: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: 18.x, 20.x, 22.x" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Nightly build cycle completed! ðŸŒ™" >> $GITHUB_STEP_SUMMARY
